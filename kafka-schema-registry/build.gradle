import com.github.davidmc24.gradle.plugin.avro.GenerateAvroJavaTask

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.github.davidmc24.gradle.plugin.avro' version '1.9.1'


}

group = 'com.eaa.avro'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(19)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}



repositories {
	mavenCentral()
	maven {
		url "https://packages.confluent.io/maven"
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.kafka:spring-kafka'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// https://mvnrepository.com/artifact/io.confluent/kafka-avro-serializer
	implementation group: 'io.confluent', name: 'kafka-avro-serializer', version: '7.8.0'

	// https://mvnrepository.com/artifact/io.confluent/kafka-schema-registry-client
	implementation group: 'io.confluent', name: 'kafka-schema-registry-client', version: '7.8.0'

	// https://mvnrepository.com/artifact/org.apache.avro/avro
	implementation group: 'org.apache.avro', name: 'avro', version: '1.12.0'



	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

def generateAvro = tasks.register("generateAvro", GenerateAvroJavaTask) {
	source("src/main/resources/avro") // Location of your Avro schema files
	outputDir = file("src/main/java") // Output directory for generated Java classes
}

tasks.named('test') {
	useJUnitPlatform()
}


